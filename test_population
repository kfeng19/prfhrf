include(joinpath(@__DIR__,"population_optimizer.jl"))
include(joinpath(@__DIR__,"forward_model.jl"))
include(joinpath(@__DIR__,"Utilities.jl"))

## Generate data
x_gt = [1,3,2.5, 6, 10, 0.8, 0.9, 0.4]
# input = generate_data(x_gt)
x_t = reverse_input(x_gt)
stim_sequence = load_stimulus()
time_series = forward_model(stim_sequence, x_t, isComplex=false)

## Functions
f(x) = loss(forward_model(stim_sequence,x,isComplex=false),time_series,x)
f_full(x) = f(x) + quadratic_penalty(constraints, x)

## Initial
x = [0, 0, 3, 8, 9, 0.7, 0.8, 0.5]
μ = reverse_input(x)
σx = [1, 1, 1, 1, 1, 0.1, 0.1, 0.1]
σt = reverse_input(σx + x) - μ
locations = rand_population_cauchy(100, μ, σt)
temp = transform_input.(locations)
population = init_particles(f_full, locations)

## Begin
out, x_best, y_best = particle_swarm_optimization(f_full, population, 20)
x1 = transform_input(x_best)

## Resulted signal
outfit = forward_model(stim_sequence, x_best, isComplex=false)
plot(outfit)
plot!(time_series)

## hrf
t=0:20
plot(hrf_fun(x1[4:end]...,t))
plot!(hrf_fun(6, 10, 0.8, 0.9, 0.4, t))
